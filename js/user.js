// Generated by CoffeeScript 1.6.1
(function() {
  var User, _ref,
    _this = this;

  if ((_ref = window.birdseye) == null) {
    window.birdseye = {};
  }

  User = (function() {

    User.prototype.status = ko.observable("signed-out");

    User.prototype.name = ko.observable();

    User.prototype.organisationIds = ko.observableArray();

    function User() {
      var _this = this;
      this._update = function() {
        return User.prototype._update.apply(_this, arguments);
      };
      this._error = function(m) {
        return User.prototype._error.apply(_this, arguments);
      };
      this._signIn = function() {
        return User.prototype._signIn.apply(_this, arguments);
      };
      this._clear = function() {
        return User.prototype._clear.apply(_this, arguments);
      };
      this.signOut = function() {
        return User.prototype.signOut.apply(_this, arguments);
      };
      this.freshSignIn = function() {
        return User.prototype.freshSignIn.apply(_this, arguments);
      };
      this.signedIn = ko.computed(function() {
        return _this.status() === "signed-in";
      });
    }

    User.prototype.freshSignIn = function() {
      this._clear();
      this.signOut();
      return this._signIn();
    };

    User.prototype.signOut = function() {
      this._clear();
      Trello.deauthorize();
      return this.status("signed-out");
    };

    User.prototype._clear = function() {
      this.name(null);
      return this.organisationIds([]);
    };

    User.prototype._signIn = function() {
      var _this = this;
      this.status("signing-in");
      return Trello.authorize({
        type: "redirect",
        name: "Birds Eye",
        success: function() {
          _this.status("signed-in");
          return _this._update();
        },
        error: this._error
      });
    };

    User.prototype._error = function(m) {
      this.signOut();
      return console.log("Error: " + m);
    };

    User.prototype._update = function() {
      var _this = this;
      this._clear();
      return Trello.members.get("me", {}, function(user) {
        _this.name(user.fullName);
        return _this.organisationIds(user.idOrganizations);
      }, this._error);
    };

    return User;

  })();

  window.birdseye.User = User;

}).call(this);
